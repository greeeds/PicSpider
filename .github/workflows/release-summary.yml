name: Release Summary

on:
  workflow_run:
    workflows: ["Build and Release"]
    types:
      - completed

jobs:
  summary:
    name: Build Summary
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion != 'skipped'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get release info
      id: release
      run: |
        # Get the release tag from the workflow run
        RELEASE_TAG=$(gh api repos/${{ github.repository }}/releases/latest --jq '.tag_name')
        echo "tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
        echo "Release tag: $RELEASE_TAG"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Check build artifacts
      id: artifacts
      run: |
        # Check which artifacts were successfully uploaded
        RELEASE_TAG="${{ steps.release.outputs.tag }}"
        
        echo "Checking release assets for $RELEASE_TAG..."
        ASSETS=$(gh api repos/${{ github.repository }}/releases/tags/$RELEASE_TAG --jq '.assets[].name')
        
        echo "Found assets:"
        echo "$ASSETS"
        
        # Check for each platform
        WINDOWS_SUCCESS="false"
        MACOS_SUCCESS="false"
        LINUX_SUCCESS="false"
        
        if echo "$ASSETS" | grep -q "PicSpider-Windows.zip"; then
          WINDOWS_SUCCESS="true"
        fi
        
        if echo "$ASSETS" | grep -q "PicSpider-macOS.zip"; then
          MACOS_SUCCESS="true"
        fi
        
        if echo "$ASSETS" | grep -q "PicSpider-Linux.tar.gz"; then
          LINUX_SUCCESS="true"
        fi
        
        echo "windows=$WINDOWS_SUCCESS" >> $GITHUB_OUTPUT
        echo "macos=$MACOS_SUCCESS" >> $GITHUB_OUTPUT
        echo "linux=$LINUX_SUCCESS" >> $GITHUB_OUTPUT
        
        # Count successful builds
        SUCCESS_COUNT=0
        if [ "$WINDOWS_SUCCESS" = "true" ]; then SUCCESS_COUNT=$((SUCCESS_COUNT + 1)); fi
        if [ "$MACOS_SUCCESS" = "true" ]; then SUCCESS_COUNT=$((SUCCESS_COUNT + 1)); fi
        if [ "$LINUX_SUCCESS" = "true" ]; then SUCCESS_COUNT=$((SUCCESS_COUNT + 1)); fi
        
        echo "success_count=$SUCCESS_COUNT" >> $GITHUB_OUTPUT
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update release description
      run: |
        RELEASE_TAG="${{ steps.release.outputs.tag }}"
        WINDOWS_SUCCESS="${{ steps.artifacts.outputs.windows }}"
        MACOS_SUCCESS="${{ steps.artifacts.outputs.macos }}"
        LINUX_SUCCESS="${{ steps.artifacts.outputs.linux }}"
        SUCCESS_COUNT="${{ steps.artifacts.outputs.success_count }}"
        
        # Create build status section
        BUILD_STATUS="## üèóÔ∏è Build Status\n\n"
        
        if [ "$WINDOWS_SUCCESS" = "true" ]; then
          BUILD_STATUS="${BUILD_STATUS}‚úÖ **Windows**: Build successful - \`PicSpider-Windows.zip\`\n"
        else
          BUILD_STATUS="${BUILD_STATUS}‚ùå **Windows**: Build failed\n"
        fi
        
        if [ "$MACOS_SUCCESS" = "true" ]; then
          BUILD_STATUS="${BUILD_STATUS}‚úÖ **macOS**: Build successful - \`PicSpider-macOS.zip\`\n"
        else
          BUILD_STATUS="${BUILD_STATUS}‚ùå **macOS**: Build failed\n"
        fi
        
        if [ "$LINUX_SUCCESS" = "true" ]; then
          BUILD_STATUS="${BUILD_STATUS}‚úÖ **Linux**: Build successful - \`PicSpider-Linux.tar.gz\`\n"
        else
          BUILD_STATUS="${BUILD_STATUS}‚ùå **Linux**: Build failed\n"
        fi
        
        BUILD_STATUS="${BUILD_STATUS}\n**Total**: ${SUCCESS_COUNT}/3 platforms built successfully\n"
        
        if [ "$SUCCESS_COUNT" = "3" ]; then
          BUILD_STATUS="${BUILD_STATUS}\nüéâ All platforms built successfully!\n"
        elif [ "$SUCCESS_COUNT" = "0" ]; then
          BUILD_STATUS="${BUILD_STATUS}\n‚ö†Ô∏è All builds failed. Please check the workflow logs.\n"
        else
          BUILD_STATUS="${BUILD_STATUS}\n‚ö†Ô∏è Some builds failed. Available downloads above.\n"
        fi
        
        # Get current release body
        CURRENT_BODY=$(gh api repos/${{ github.repository }}/releases/tags/$RELEASE_TAG --jq '.body // ""')
        
        # Check if build status already exists
        if echo "$CURRENT_BODY" | grep -q "## üèóÔ∏è Build Status"; then
          # Replace existing build status
          NEW_BODY=$(echo "$CURRENT_BODY" | sed '/## üèóÔ∏è Build Status/,$d')
          NEW_BODY="${NEW_BODY}\n${BUILD_STATUS}"
        else
          # Append build status
          NEW_BODY="${CURRENT_BODY}\n\n${BUILD_STATUS}"
        fi
        
        # Update release
        gh api repos/${{ github.repository }}/releases/tags/$RELEASE_TAG \
          --method PATCH \
          --field body="$NEW_BODY"
        
        echo "Release description updated with build status"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create issue on failure
      if: steps.artifacts.outputs.success_count == '0'
      run: |
        RELEASE_TAG="${{ steps.release.outputs.tag }}"
        
        # Create an issue for failed builds
        gh issue create \
          --title "üö® All builds failed for release $RELEASE_TAG" \
          --body "All platform builds failed for release [$RELEASE_TAG](https://github.com/${{ github.repository }}/releases/tag/$RELEASE_TAG).

Please check the [workflow runs](https://github.com/${{ github.repository }}/actions) for details.

**Failed platforms:**
- ‚ùå Windows
- ‚ùå macOS  
- ‚ùå Linux

**Next steps:**
1. Check workflow logs for error details
2. Fix any issues in the build script or dependencies
3. Re-run the failed workflows or create a new release" \
          --label "bug,build-failure"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
