name: Build and Release

on:
  release:
    types: [published]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            artifact_name: PicSpider-Windows
            artifact_path: dist/
            archive_format: zip
          - os: macos-latest
            platform: macos
            artifact_name: PicSpider-macOS
            artifact_path: dist/
            archive_format: zip
          - os: ubuntu-latest
            platform: linux
            artifact_name: PicSpider-Linux
            artifact_path: dist/
            archive_format: tar.gz

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run build script
      run: python build.py

    - name: List dist contents (Debug)
      run: |
        echo "Contents of dist directory:"
        ls -la dist/
      shell: bash

    - name: Create archive (Windows/macOS - ZIP)
      if: matrix.archive_format == 'zip'
      run: |
        cd dist
        if [ "${{ matrix.platform }}" = "windows" ]; then
          7z a -tzip "../${{ matrix.artifact_name }}.zip" *
        else
          zip -r "../${{ matrix.artifact_name }}.zip" *
        fi
      shell: bash

    - name: Create archive (Linux - TAR.GZ)
      if: matrix.archive_format == 'tar.gz'
      run: |
        cd dist
        tar -czf "../${{ matrix.artifact_name }}.tar.gz" *

    - name: Upload Release Asset
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        if [ "${{ matrix.archive_format }}" = "zip" ]; then
          gh release upload ${{ github.event.release.tag_name }} "${{ matrix.artifact_name }}.zip" --clobber
        else
          gh release upload ${{ github.event.release.tag_name }} "${{ matrix.artifact_name }}.tar.gz" --clobber
        fi

    - name: Upload build artifacts (for debugging)
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-debug
        path: |
          dist/
          *.spec
        retention-days: 7
