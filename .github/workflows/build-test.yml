name: Build Test

on:
  push:
    branches: [ main, master, gui ]
  pull_request:
    branches: [ main, master, gui ]

jobs:
  test-build:
    name: Test Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
          - os: macos-latest
            platform: macos
          - os: ubuntu-latest
            platform: linux

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8 (if available)
      continue-on-error: true
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Test import of main modules
      run: |
        python -c "import gui; print('GUI module imported successfully')"
        python -c "import config; print('Config module imported successfully')"
        python -c "import main; print('Main module imported successfully')" || echo "Main module import failed (may be expected)"

    - name: Create PyInstaller spec file
      run: python -c "
import os
import platform

platform_name = platform.system().lower()
spec_content = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['gui.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('templates', 'templates'),
        ('config.json', '.'),
    ],
    hiddenimports=[
        'tkinter',
        'tkinter.ttk',
        'tkinter.messagebox',
        'tkinter.filedialog',
        'tkinter.scrolledtext',
        'flask',
        'requests',
        'beautifulsoup4',
        'concurrent.futures',
        'threading',
        'webbrowser',
        'json',
        'pathlib',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='PicSpider',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=None,
)'''

if platform_name == 'darwin':
    spec_content += '''

app = BUNDLE(
    exe,
    name='PicSpider.app',
    icon=None,
    bundle_identifier='com.picspider.app',
    info_plist={
        'NSHighResolutionCapable': 'True',
        'NSRequiresAquaSystemAppearance': 'False',
    },
)'''

with open('PicSpider.spec', 'w', encoding='utf-8') as f:
    f.write(spec_content)
"

    - name: Test PyInstaller build
      run: |
        python -m PyInstaller PicSpider.spec --clean --noconfirm

    - name: Verify build output
      shell: bash
      run: |
        if [[ "${{ matrix.platform }}" == "windows" ]]; then
          ls -la dist/PicSpider.exe
          file dist/PicSpider.exe || echo "file command not available"
        elif [[ "${{ matrix.platform }}" == "macos" ]]; then
          ls -la dist/PicSpider.app/
          ls -la dist/PicSpider.app/Contents/MacOS/
        else
          ls -la dist/PicSpider
          file dist/PicSpider
        fi

    - name: Upload build artifacts for debugging
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: build-logs-${{ matrix.platform }}
        path: |
          build/
          *.spec
          dist/
        retention-days: 7
