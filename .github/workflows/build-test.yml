name: Build Test

on:
  push:
    branches: [ main, master, gui ]
  pull_request:
    branches: [ main, master, gui ]

jobs:
  test-build:
    name: Test Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        python-version: ['3.8', '3.9', '3.10']
        exclude:
          # 减少构建矩阵，只在主要版本上测试所有平台
          - os: macos-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.10'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Verify dependencies
      run: |
        python -c "import flask; print('Flask version:', flask.__version__)"
        python -c "import requests; print('Requests version:', requests.__version__)"
        python -c "import bs4; print('BeautifulSoup4 version:', bs4.__version__)"
        python -c "import PyInstaller; print('PyInstaller version:', PyInstaller.__version__)"

    - name: Test build script (dry run)
      run: |
        # 创建一个测试版本的build.py，只执行到spec文件创建
        python -c "
        import sys
        sys.path.append('.')
        from build import get_platform_info, create_pyinstaller_spec, clean_build_dirs
        
        print('Testing build script components...')
        platform_name, ext = get_platform_info()
        print(f'Platform: {platform_name}, Extension: {ext}')
        
        print('Cleaning build directories...')
        clean_build_dirs()
        
        print('Creating PyInstaller spec...')
        create_pyinstaller_spec()
        
        print('Build test completed successfully!')
        "

    - name: Verify spec file creation
      run: |
        if [ -f "PicSpider.spec" ]; then
          echo "✅ PicSpider.spec created successfully"
          echo "Spec file contents:"
          head -20 PicSpider.spec
        else
          echo "❌ PicSpider.spec not found"
          exit 1
        fi
      shell: bash

    - name: Test PyInstaller analysis (without building)
      run: |
        python -m PyInstaller --analyze PicSpider.spec --log-level INFO || echo "Analysis completed with warnings"

  quick-build:
    name: Quick Build Test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Quick build test (spec creation only)
      run: |
        python -c "
        from build import create_pyinstaller_spec, get_platform_info
        platform_name, ext = get_platform_info()
        print(f'Quick test for platform: {platform_name}')
        create_pyinstaller_spec()
        print('✅ Spec file created successfully')
        "

    - name: Validate Python syntax
      run: |
        python -m py_compile build.py
        python -m py_compile gui.py
        python -m py_compile app.py
        python -m py_compile main.py
        python -m py_compile config.py
        echo "✅ All Python files have valid syntax"
